import re

from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.types import Message
from data import mongodb, character_photo
from keyboards.builders import start_button, goto_bot
from recycling import profile

router = Router()


async def get_inventory(data):
    rarity, user_id = data.split('/')

    rarity_dict = {
        'gd': 'divine',
        'gm': 'mythical',
        'gl': 'legendary',
        'ge': 'epic',
        'gr': 'rare',
        'gc': 'common'
    }
    rarity = rarity_dict[rarity]

    account = await mongodb.get_user(int(user_id))
    invent = account['inventory']['characters']
    return invent[rarity]


@router.message(F.text.lower().in_(['–º–æ—è –∫–∞—Ä—Ç–∞', '–ø—Ä–æ—Ñ–∏–ª—å']))
async def main_chat(message: Message):
    user_id = message.from_user.id
    account = await mongodb.get_user(user_id)

    if account is not None and account['_id'] == user_id:

        universe = account['universe']
        character = account['character'][account['universe']]
        avatar = character_photo.get_stats(universe, character, 'avatar')
        avatar_type = character_photo.get_stats(universe, character, 'type')

        await profile.update_rank(user_id, account["battle"]["stats"]['wins'])
        await profile.update_level(user_id, account["campaign"]["count"])

        rank = await profile.rerank(account['stats']['rank'])
        level = await profile.level(account['campaign']['level'])

        characters = account['inventory']['characters']

        total_characters = 0
        for outer_key in characters:
            for inner_key in characters[outer_key]:
                total_characters += len(characters[outer_key][inner_key])

        pattern = dict(
            caption=f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                    f"\n ü™™  „Ä¢ –ü—Ä–æ—Ñ–∏–ª—å {account['name']} "
                    f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                    f"\n\n‚ùñüé¥ <b>{character}</b>"
                    f"\n‚ùñüó∫ –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}"
                    f"\n‚ùñüéê <b>{rank}</b>"
                    f"\n‚ùñ‚õ©Ô∏è <b>{level}</b>"
                    f"\n\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                    f"\n<i><b>‚ùÉüí¥ {account['account']['money']} ¬• ‚ùÉ {account['campaign']['power']} ‚öúÔ∏è –ú–æ—â–∏"
                    f"\n‚ùÉüÄÑÔ∏è {account['stats']['exp']} XP ‚ùÉ {total_characters} üÉè –ö–∞—Ä—Ç</b></i>",
            parse_mode=ParseMode.HTML,
            reply_markup=goto_bot()
        )
        if avatar_type == 'photo':
            await message.answer_photo(avatar, **pattern)
        else:
            await message.answer_animation(avatar, **pattern)
    else:
        media = "CgACAgIAAx0CfstymgACBbRlzDgYWpgLO50Lgeg0HImQEC9GEAAC7D4AAsywYUo5sbjTkVkCRjQE"
        await message.answer_animation(animation=media, caption="‚úß ‚Ä¢ üìÑ –¢—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
                                                                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                                                                f"\n‚ùñ üíÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∏ "
                                                                f"–ø–æ–ª—É—á–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é üé¥ –∫–∞—Ä—Ç—É"
                                                                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
                                       reply_markup=start_button())


@router.message(F.text.lower().in_(['–±–∏—Ç–≤—ã', '—Ä–µ–π—Ç–∏–Ω–≥']))
async def campaign_rank(message: Message):
    chat_id = message.chat.id
    rating = await mongodb.chat_rating(chat_id, 'üëë')

    await message.answer(f"‚ùñ  üèÜ  <b>–°–∏–ª—å–Ω–µ–π—à–∏–µ –∏–≥—Ä–æ–∫–∏ —á–∞—Ç–∞</b>"
                         f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                         f"{rating}", disable_web_page_preview=True)


@router.message(F.text.startswith('–¥–∞—Ç—å') | F.text.startswith('–î–∞—Ç—å')
                | F.text.startswith('–ø–µ—Ä–µ–≤–µ—Å—Ç–∏') | F.text.startswith('–ü–µ—Ä–µ–≤–µ—Å—Ç–∏'))
async def give_money(message: Message):
    user_id = message.from_user.id
    friend_id = message.reply_to_message.from_user.id
    account = await mongodb.get_user(user_id)
    friend = await mongodb.get_user(friend_id)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–∏—Ñ—Ä—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = message.text.lower()
    numbers = re.findall(r'\d+', text)
    if numbers:
        amount = int(numbers[0])  # –ü–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ
        if user_id != friend_id:
            if account is not None and account['_id'] == user_id:
                if friend is not None and friend['_id'] == friend_id:
                    if account['account']['money'] >= amount:
                        await mongodb.update_user(user_id, {'account.money': account['account']['money'] - amount})
                        await mongodb.update_user(friend_id, {'account.money': friend['account']['money'] + amount})
                        await message.reply(f"‚ùñ ‚ú® {account['name']} –æ—Ç–ø—Ä–∞–≤–∏–ª {amount} üí¥ ¬• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {friend['name']}",
                                            disable_web_page_preview=True)
                    else:
                        await message.reply(f"‚ùñ ‚úñÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç. \n–ë–∞–ª–∞–Ω—Å: {account['account']['money']} üí¥ ¬•")
                else:
                    await message.reply("‚ùñ ‚úñÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            else:
                await message.reply("‚ùñ ‚úñÔ∏è –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤")
        else:
            await message.reply("‚ùñ ‚úñÔ∏è –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ")
    else:
        await message.reply("‚ùñ ‚úñÔ∏è –ù–µ —É–∫–∞–∑–∞–Ω–∞ —Å—É–º–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã '–¥–∞—Ç—å'")


def is_character_in_inventory(character, inventory):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –ª—é–±–æ–º –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –≤–Ω—É—Ç—Ä–∏ inventory, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä.
    """
    character_lower = character
    for key, value in inventory.items():
        if isinstance(value, dict):
            if is_character_in_inventory(character, value):
                return True
        elif isinstance(value, list):
            for item in value:
                if item == character_lower:
                    return True
    return False


@router.message(F.text.startswith('–æ—Ç–¥–∞—Ç—å') | F.text.startswith('–û—Ç–¥–∞—Ç—å'))
async def give_character(message: Message):
    user_id = message.from_user.id
    if not message.reply_to_message:
        await message.reply("‚ùñ ‚úñÔ∏è –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    friend_id = message.reply_to_message.from_user.id
    account = await mongodb.get_user(user_id)
    friend = await mongodb.get_user(friend_id)
    universe = account.get('universe')

    if not account:
        await message.reply("‚ùñ ‚úñÔ∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        return

    if not friend:
        await message.reply("‚ùñ ‚úñÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
        return

    text = message.text
    match = re.search(r'–æ—Ç–¥–∞—Ç—å\s(.+)', text)
    if not match:
        await message.reply("‚ùñ ‚úñÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–æ—Ç–¥–∞—Ç—å [–ø–µ—Ä—Å–æ–Ω–∞–∂]'.")
        return

    character = match.group(1).strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_characters = account.get('inventory', {}).get('characters', {})

    if not is_character_in_inventory(character, user_characters):
        await message.reply("‚ùñ ‚úñÔ∏è –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –ª–∏–±–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —É –¥—Ä—É–≥–∞
    friend_characters = friend.get('inventory', {}).get('characters', {})
    if is_character_in_inventory(character, friend_characters):
        await message.reply("‚ùñ ‚úñÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –æ—Å–Ω–æ–≤–Ω—ã–º
    if character == account.get('character', {}).get(account.get('universe')):
        await message.reply("‚ùñ ‚úñÔ∏è –ù–µ–ª—å–∑—è –æ—Ç–¥–∞—Ç—å —Å–≤–æ–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    avatar = character_photo.get_stats(universe, character, 'avatar')
    avatar_type = character_photo.get_stats(universe, character, 'type')
    ch_universe = character_photo.get_stats(universe, character, 'universe')
    rarity = character_photo.get_stats(universe, character, 'rarity')

    if rarity == '–û–±—ã—á–Ω–∞—è':
        rarity = 'common'
    elif rarity == '–†–µ–¥–∫–∞—è':
        rarity = 'rare'
    elif rarity == '–≠–ø–∏—á–µ—Å–∫–∞—è':
        rarity = 'epic'
    elif rarity == '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è':
        rarity = 'legendary'
    elif rarity == '–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è':
        rarity = 'mythical'
    elif rarity == '–ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è':
        rarity = 'divine'

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏
    await mongodb.push(universe, rarity, character, friend_id)
    await mongodb.pull(universe, rarity, character, user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–µ–¥–∞—á–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if avatar_type == 'photo':
        await message.reply_photo(
            avatar,
            caption=f"‚ùñ ‚ú® {account['name']} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {friend['name']} –Ω–∞ üó∫ –≤—Å–µ–ª–µ–Ω–Ω—É—é {ch_universe}",
            disable_web_page_preview=True
        )
    else:
        await message.reply_animation(
            avatar,
            caption=f"‚ùñ ‚ú® {account['name']} –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ {character} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {friend['name']} –Ω–∞ üó∫ –≤—Å–µ–ª–µ–Ω–Ω—É—é {ch_universe}",
            disable_web_page_preview=True
        )


@router.message(F.text.lower().in_(['–±–∞–ª–∞–Ω—Å', '–±']))
async def balance(message: Message):
    user_id = message.from_user.id
    account = await mongodb.get_user(user_id)

    if account is not None and account['_id'] == user_id:
        await message.answer(f"‚ùñ üí¥ –í–∞—à –±–∞–ª–∞–Ω—Å: {account['account']['money']} ¬•")
    else:
        await message.answer("‚ùñ ‚úñÔ∏è –¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", reply_markup=start_button())



"""
@router.message((F.text == '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å') | (F.text == '–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å') | (F.text == '–∫–∞—Ä—Ç—ã')
                | (F.text == '–ö–∞—Ä—Ç—ã') | (F.text == 'ü•° –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å'))
@router.callback_query(F.data.regexp("(g_inventory)\/([0-9]*)$").as_("data"))
async def inventory(message: Message | CallbackQuery, state: FSMContext):
    user_id = message.from_user.id
    account = await mongodb.get_user(user_id)

    if account is not None and account['_id'] == user_id:

        await state.update_data(id=user_id)
        media_id = "CgACAgIAAxkBAAIVCmXMvbzs7hde-fvY9_4JCwU8W6HpAAKgOwACeyZoSuedvZenkxDNNAQ"
        total_divine = len(account['inventory']['characters']['divine'])
        total_mythical = len(account['inventory']['characters']['mythical'])
        total_legendary = len(account['inventory']['characters']['legendary'])
        total_epic = len(account['inventory']['characters']['epic'])
        total_rare = len(account['inventory']['characters']['rare'])
        total_common = len(account['inventory']['characters']['common'])
        total_elements = sum(len(account['inventory']['characters'][sublist])
                             for sublist in account['inventory']['characters'])

        pattern = dict(caption=f"ü•° –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"
                               f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                               f"\n‚ùñ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ üé¥ –∫–∞—Ä—Ç—ã"
                               f"\n\n‚ùñ –í—ã–±–µ—Ä–∏—Ç–µ ‚ú® —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã, "
                               f"—á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Ö"
                               f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                               f"\n‚ùñ üé¥ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç: {total_elements}",
                       reply_markup=inline_builder([f"üå† –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ üåü {total_divine}",
                                                    f"üåå –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ ‚≠êÔ∏è {total_mythical}",
                                                    f"üåÖ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ ‚≠êÔ∏è {total_legendary}",
                                                    f"üéÜ –≠–ø–∏—á–µ—Å–∫–∏–µ ‚≠êÔ∏è {total_epic}",
                                                    f"üéá –†–µ–¥–∫–∏–µ ‚≠êÔ∏è {total_rare}",
                                                    f"üåÅ –û–±—ã—á–Ω—ã–µ ‚≠êÔ∏è {total_common}"],
                                                   [f"gd/{user_id}", f"gm/{user_id}", f"gl/{user_id}",
                                                    f"ge/{user_id}", f"gr/{user_id}", f"gc/{user_id}"], row_width=[1]))
        if isinstance(message, CallbackQuery):
            callback_id = message.inline_message_id
            await message.message.edit_caption(inline_message_id=callback_id, **pattern)
        else:
            await message.answer_animation(animation=media_id, **pattern)
    else:
        media = "CgACAgIAAx0CfstymgACBbRlzDgYWpgLO50Lgeg0HImQEC9GEAAC7D4AAsywYUo5sbjTkVkCRjQE"
        await message.answer_animation(animation=media, caption="‚úß ‚Ä¢ üìÑ –¢—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
                                                                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                                                                f"\n‚ùñ üíÆ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –Ω–∞–º –∏ "
                                                                f"–ø–æ–ª—É—á–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é üé¥ –∫–∞—Ä—Ç—É"
                                                                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
                                       reply_markup=start_button())


@router.callback_query(F.data.regexp("(gd|gm|gl|ge|gr|gc)\/([0-9]*)$").as_("data"))
async def inventory(callback: CallbackQuery, state: FSMContext, data: Match[str]):
    g, user_id = data.groups()
    if callback.from_user.id != int(user_id):
        await callback.answer("‚ùñ ‚úñÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", show_alert=True)
        return

    await state.update_data(rarity=callback.data)
    inline_id = callback.inline_message_id
    user_id = callback.from_user.id
    invent = await get_inventory(callback.data)
    if invent == []:
        await callback.answer("‚ùñ ‚úñÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏", show_alert=True)
        return
    await state.update_data(character=invent[0])
    file, file_type = character_photo.get_file_id(invent[0])
    if file_type == 'photo':
        photo = InputMediaPhoto(media=file)
    else:
        photo = InputMediaAnimation(media=file)
    stats = character_photo.get_stats(invent[0])
    await callback.message.edit_media(photo, inline_id)
    await callback.message.edit_caption(inline_id, f"üé¥ {invent[0]}"
                                                   f"\n ‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                                                   f"\n‚ùñ ‚ú® –†–µ–¥–∫–æ—Å—Ç—å: {stats[5]}"
                                                   f"\n\n ‚öúÔ∏è –°–∏–ª–∞: {stats[0]}"
                                                   f"\n ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {stats[1]}"
                                                   f"\n üó° –ê—Ç–∞–∫–∞: {stats[2]}"
                                                   f"\n üß™ –ú–∞–Ω–∞: {stats[3]}"
                                                   f"\n üõ° –ó–∞—â–∏—Ç–∞ {stats[4]}"
                                                   f"\n‚îÄ‚îÄ‚ùÄ*Ã•Àö‚îÄ‚îÄ‚óå‚îÄ‚îÄ‚óå‚îÄ‚îÄ‚ùÄ*Ã•Àö‚îÄ‚îÄ‚îÄ‚îÄ"
                                                   f"\n‚ùñ üîñ 1 –∏–∑ {len(invent)}",
                                        reply_markup=pagination_group(user_id))


@router.callback_query(Pagination.filter(F.action.regexp("(g_prev|g_next)\/([0-9]*)$").as_("data")))
async def inventory(callback: CallbackQuery, callback_data: Pagination, state: FSMContext, data: Match[str]):
    await callback.answer("–£—Å–ø–µ—à–Ω–æ")
    inline_id = callback.inline_message_id
    page_num = int(callback_data.page)
    user_data = await state.get_data()

    g, user_id = data.groups()
    if callback.from_user.id != int(user_id):
        await callback.answer("‚ùñ ‚úñÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", show_alert=True)
        return

    invent = await get_inventory(user_data['rarity'])

    action, user_id = callback_data.action.split('/')

    if action == "g_next":
        page_num = (page_num + 1) % len(invent)
    elif action == "g_prev":
        page_num = (page_num - 1) % len(invent)

    with suppress(TelegramBadRequest):
        await state.update_data(character=invent[page_num])
        stats = character_photo.get_stats(invent[page_num])
        file, file_type = character_photo.get_file_id(invent[page_num])
        if file_type == 'photo':
            photo = InputMediaPhoto(media=file)
        else:
            photo = InputMediaAnimation(media=file)
        await callback.message.edit_media(photo, inline_id)
        await callback.message.edit_caption(
            inline_id,
            f"üé¥ {invent[page_num]}"
            f"\n ‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
            f"\n‚ùñ üå† –†–µ–¥–∫–æ—Å—Ç—å: {stats[5]}"
            f"\n\n ‚öúÔ∏è –°–∏–ª–∞: {stats[0]}"
            f"\n ‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: {stats[1]}"
            f"\n üó° –ê—Ç–∞–∫–∞: {stats[2]}"
            f"\n üß™ –ú–∞–Ω–∞: {stats[3]}"
            f"\n üõ° –ó–∞—â–∏—Ç–∞ {stats[4]}"
            f"\n‚îÄ‚îÄ‚ùÄ*Ã•Àö‚îÄ‚îÄ‚óå‚îÄ‚îÄ‚óå‚îÄ‚îÄ‚ùÄ*Ã•Àö‚îÄ‚îÄ‚îÄ‚îÄ"
            f"\n‚ùñ üîñ {page_num + 1} –∏–∑ {len(invent)}",
            reply_markup=pagination_group(page_num)
        )
    await callback.answer()


@router.callback_query(F.data.regexp("(g_change_character)\/([0-9]*)$").as_("data"))
async def change_ch(callback: CallbackQuery, state: FSMContext, data: Match[str]):

    g, user_id = data.groups()
    if callback.from_user.id != int(user_id):
        await callback.answer("‚ùñ ‚úñÔ∏è –≠—Ç–æ –Ω–µ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", show_alert=True)
        return
    else:
        data = await state.get_data()
        await mongodb.update_user(user_id, {'character': data.get('character')})
        await callback.answer("üé¥ –í–´ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", show_alert=True)
"""
