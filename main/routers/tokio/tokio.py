import random
from datetime import datetime, timedelta

from aiogram import Router, F

from aiogram.types import CallbackQuery, InputMediaAnimation, InputMediaPhoto, Message
from aiogram.enums import ParseMode

from keyboards.builders import inline_builder
from data import mongodb
from filters.chat_type import ChatTypeFilter

router = Router()

menu = ["CgACAgIAAxkBAAIVCWXMvbya7qFOU8F85SXUu24hM5wgAAKfOwACeyZoShH4z6iUPi8kNAQ",
        "CgACAgIAAxkBAAIVCGXMva_F1yC11Mw3o1gv27ZgOmICAAKdOwACeyZoSqKFTee3GFhiNAQ",
        "CgACAgIAAxkBAAIVBmXMvQTWWfC3KX66Wy4evn7cWtHuAAKUOwACeyZoSsragGfIS2gINAQ",
        "CgACAgIAAxkBAAIVAWXMvHhsXaPhuLALMBuumsH-TO4dAAKNOwACeyZoSjQXaqlcQ_ZPNAQ",
        "CgACAgIAAxkBAAIU_mXMvCAB6-_wn8o6hpUwwaR-EF6IAAJ4RQACzLBpSgF57_JwVq60NAQ",
        "CgACAgIAAxkBAAIVAAFlzLxX7B3NqbKxkBbz_SAosLc8eQACjDsAAnsmaEo-TETgyUqmcjQE",
        "CgACAgIAAxkBAAIU_2XMvDvTFeOYOdwd5QRQsPUdhGPlAAKKOwACeyZoSpr5AQNXbnVENAQ",
        "CgACAgIAAxkBAAIU_WXMvB2fCF7pcS9cZDdEMNeeWIe2AAKFOwACeyZoSqkPzi4qGFdvNAQ",
        "CgACAgIAAxkBAAIU-GXMuu17Zb88QyTyVxOEwPFjeCRJAAJoOwACeyZoSp9AqDTjvy4lNAQ",
        "CgACAgIAAxkBAAIU-WXMuv67-KrxO8NKeQgUw4LsrDSSAAJqOwACeyZoSvtrR6TF1C2BNAQ",
        "CgACAgIAAxkBAAIVA2XMyQ7c7bzjIhd4ecf9W6TGWm6eAAKPOwACeyZoSsm5IEXYiJoKNAQ",
        "CgACAgIAAx0CfstymgACBd5lzO0zU05NJEIDdrzbQNLwSMi_XgACbUkAAsywaUqtbVk4cEzxrzQE",
        "CgACAgIAAx0CfstymgACBd1lzO0zAm8ov_iX9BAY7_QVIkf3NQACbEkAAsywaUoWn4BRgx1huTQE",
        "CgACAgIAAx0CfstymgACBdxlzO0yxbOLTRm_B0ttpbA7WYEFdgACa0kAAsywaUoVOJ0ILUcy3jQE",
        "CgACAgIAAx0CfstymgACIB5nE7mXOOMrHrWyLobEDbk85ehs7QAC6FgAAqiJoEg5NN5yufK0QzYE",
        "CgACAgIAAx0CfstymgACIBRnE7ipKamfva-CfgqsiZJ-EKMGxwACxFgAAqiJoEijvBsGD_fnpjYE",
        "CgACAgIAAx0CfstymgACIBJnE7ih9KNvH8o3P1Yy1rTY4o7YVQACwlgAAqiJoEiVpQSxmKi5sjYE",
        "CgACAgIAAx0CfstymgACIBBnE7ibsUe_hxrML0hwjTHC0jWZXQACwVgAAqiJoEhlPEBRZo_wlTYE",
        "CgACAgIAAx0CfstymgACIA5nE7iRTMe8cH8bBZgvI8ZbeAW0tAACv1gAAqiJoEi3kcjjLHSleDYE",
        "CgACAgIAAx0CfstymgACIAxnE7iJXL7xxL4a5vmYVhL3zTuYZwACvVgAAqiJoEgvOYe5dmhxFjYE",
        "CgACAgIAAx0CfstymgACIApnE7h9jBb9jkmJNh_KJ792kiapEAACu1gAAqiJoEjYTH71QJA-TjYE"]


@router.message(
    ChatTypeFilter(chat_type=["private"]),
    F.text == "üíÆ –ú–µ–Ω—é"
)
@router.callback_query(F.data == "tokio")
async def tokio(callback: CallbackQuery | Message):
    user_id = callback.from_user.id
    account = await mongodb.get_user(user_id)

    money = account['account']['money']

    pattern = dict(
        caption=f"‚ùñ  üíÆ  <b>–ú–µ–Ω—é</b>"
                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                f"\n ‚ùñ üåä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤—Å–µ–ª–µ–Ω–Ω—É—é, –≥–¥–µ –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ –≤–Ω–æ—Å–∏—Ç —Å–≤–æ–π –≤–∫–ª–∞–¥ –≤ —Å–æ–∑–¥–∞–Ω–∏–µ "
                f"–Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º–æ–≥–æ –º–∏—Ä–∞"
                f"\n\n ‚ùñ üí´ –ü—Ä–∏–≥–ª–∞—à–∞—è –¥—Ä—É–∑–µ–π –∏–ª–∏ –∫—É–ø–∏–≤ —Å–≤—è—â–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç "
                f"–¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è"
                f"\n\n ‚ùñ üèµ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                f"\n‚ùÉ üí¥ {money} ¬•",
        parse_mode=ParseMode.HTML,
        reply_markup=inline_builder(
            ["üéê –ë–∞–Ω–Ω–µ—Ä—ã", "ü™™ –ü—Ä–æ—Ñ–∏–ª—å", "üè™ –†—ã–Ω–æ–∫", "üè† –î–æ–º", "üìú –ö–≤–µ—Å—Ç—ã", "üÉè –ë–∏—Ç–≤–∞", "üèØ –ö–ª–∞–Ω"],
            ["banner", "main_page", "store", "home", "quests", "card_battle", "clan"],
            row_width=[1, 2, 2]
            )
    )

    media_id = random.choice(menu)

    if isinstance(callback, CallbackQuery):
        inline_id = callback.inline_message_id
        media = InputMediaAnimation(media=media_id)

        await callback.message.edit_media(media, inline_id)
        await callback.message.edit_caption(inline_id, **pattern)
    else:
        await callback.answer_animation(media_id, **pattern)


homes_photo = {'üè† home_1': 'CgACAgIAAxkBAAIU-2XMuzNmOsXp4JxBcGGDbpD_XENiAAJwOwACeyZoSsgIg-cm-c8iNAQ',
               'üè† home_2': 'CgACAgIAAxkBAAIU_GXMuza-voX5wQABXHuYInkx0vGpQwACcTsAAnsmaEr83Z9UehDa5jQE',
               'üè† home_3': 'CgACAgIAAxkBAAIU-mXMuxgz2RBDeRa8TE0AAaSXD_mKSAACbDsAAnsmaEqm72YZnRGekjQE',
               'üè† home_4': 'CgACAgIAAx0CfstymgACBSZlxMJQZb7FFLh9iPFdSpXOklwDqQACaD4AAgrXEEpTmie8hGfs1zQE',
               'üè† home_5': 'CgACAgIAAx0CfstymgACBdtlzO0rWNF9QoR6R4_5ZaHZDVb37wACakkAAsywaUpFT0CPnQYM5TQE'
               }


@router.callback_query(F.data == "clan")
async def clan(callback: CallbackQuery):
    await callback.answer(f"‚ùñ  üèØ –ö–ª–∞–Ω—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data == "card_battle")
async def card_battle(callback: CallbackQuery):
    await callback.answer(f"‚ùñ  üÉè –ö–∞—Ä—Ç–æ—á–Ω–∞—è –±–∏—Ç–≤–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data == "quests")
async def requisites(callback: CallbackQuery):
    user_id = callback.from_user.id
    current_date = datetime.today().date()
    current_datetime = datetime.combine(current_date, datetime.time(datetime.now()))
    account = await mongodb.get_user(user_id)
    yesterday_date = datetime.combine(current_date, datetime.time(datetime.now())) - timedelta(days=1)
    if "tasks" not in account:
        await mongodb.update_user(user_id, {"tasks": {
            "last_summon": yesterday_date,
            "last_arena_fight": yesterday_date,
            "last_shop_purchase": yesterday_date,
            "last_free_summon": yesterday_date,
            "last_dungeon": yesterday_date,
            "last_tasks_view": current_datetime,
            "last_get_reward": yesterday_date
        }})
        account = await mongodb.get_user(user_id)
    # –ü–æ–ª—É—á–∞–µ–º tasks –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    tasks = account.get("tasks", {})

    # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ tasks
    required_fields = {
        "last_summon": yesterday_date,
        "last_arena_fight": yesterday_date,
        "last_shop_purchase": yesterday_date,
        "last_free_summon": yesterday_date,
        "last_dungeon": yesterday_date,
        "last_tasks_view": current_datetime,
        "last_get_reward": yesterday_date
    }

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
    for field, value in required_fields.items():
        if field not in tasks:
            tasks[field] = value
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await mongodb.update_user(user_id, {"tasks": tasks})
    account = await mongodb.get_user(user_id)
    last_view_date = account["tasks"]["last_tasks_view"]
    last_view_date = last_view_date.date()
    if last_view_date != current_date:
        await mongodb.update_user(user_id, {"tasks.last_summon": yesterday_date})
        await mongodb.update_user(user_id, {"tasks.last_arena_fight": yesterday_date})
        await mongodb.update_user(user_id, {"tasks.last_shop_purchase": yesterday_date})
        await mongodb.update_user(user_id, {"tasks.last_dungeon": yesterday_date})
        await mongodb.update_user(user_id, {"tasks.last_free_summon": yesterday_date})
        await mongodb.update_user(user_id, {"tasks.last_tasks_view": current_datetime})
    reward = "‚ÑπÔ∏è"
    last_get_reward = account["tasks"]["last_get_reward"].date()
    if last_get_reward == current_date:
        reward = "‚úÖ"
    account = await mongodb.get_user(user_id)
    summon = "‚ÑπÔ∏è"
    if account["tasks"]["last_summon"].date() == current_date:
        summon = "‚úÖ"
    arena_fight = "‚ÑπÔ∏è"
    if account["tasks"]["last_arena_fight"].date() == current_date:
        arena_fight = "‚úÖ"
    dungeon = "‚ÑπÔ∏è"
    if account["tasks"]["last_dungeon"].date() == current_date:
        dungeon = "‚úÖ"
    free_summon = "‚ÑπÔ∏è"
    if account["tasks"]["last_free_summon"].date() == current_date:
        free_summon = "‚úÖ"
    shop_purchase = "‚ÑπÔ∏è"
    if account["tasks"]["last_shop_purchase"].date() == current_date:
        shop_purchase = "‚úÖ"

    if account['account']['prime']:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        current_date = datetime.today().date()
        emoji = "üíÆ"
        gold = "5"
        money = "2500"
        hall = "100"
        msg = ""
        current_datetime = datetime.combine(current_date, datetime.time(datetime.now()))

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–∞—Å—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã)
        if 'pass_expiration' in account:
            pass_expires = account['pass_expiration']
        else:
            expiration_date = current_datetime + timedelta(days=30)
            await mongodb.update_user(user_id, {"pass_expiration": expiration_date})
            pass_expires = expiration_date

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ –ø–∞—Å—Å
        if current_datetime > pass_expires:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å prime –Ω–∞ False
            await mongodb.update_value(user_id, {'account.prime': False})
    else:
        emoji = ""
        gold = "3"
        money = "1400"
        hall = "65"
        msg = "\n\n–ö—É–ø–∏—Ç–µ üíÆPass —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É"

    if "halloween" not in account['inventory']['items']:
        await mongodb.update_user(user_id, {"inventory.items.halloween": 0})

    pattern = dict(
        caption=f"‚ùñ  üìú  <b>–ö–≤–µ—Å—Ç—ã</b>"
                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                f"\n ‚ùñ üìÉ –°–ø–∏—Å–æ–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤:"
                f"\n\n  {summon} ‚Ä¢ üîÆ –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø—Ä–∏–∑—ã–≤"
                f"\n  {arena_fight} ‚Ä¢ ‚öîÔ∏è –°—Ä–∞–∑–∏—Ç–µ—Å—å –≤ –∞—Ä–µ–Ω–µ"
                f"\n  {free_summon} ‚Ä¢ üé¥ –°–æ–≤–µ—Ä—à–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–∏–∑—ã–≤"
                f"\n  {dungeon} ‚Ä¢ ‚õ© –ü—Ä–æ–¥–∞–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ"
                f"\n  {shop_purchase} ‚Ä¢ üè™ –°–æ–≤–µ—Ä—à–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Ä—ã–Ω–∫–µ"
                f"\n\n ‚ùñ üéÅ –ù–∞–≥—Ä–∞–¥–∞:"
                f"\n\n {emoji} {reward} ‚Ä¢ üé´ {gold}—Ö –∑–æ–ª–æ—Ç–æ–π –±–∏–ª–µ—Ç"
                f"\n {emoji} {reward} ‚Ä¢ üí¥ {money} ¬•"
                f"\n {emoji} {reward} ‚Ä¢ üéÉ {hall} –¢—ã–∫–≤—ã"
                f"{msg}"
                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                f"\n‚ùÉ ‚ôªÔ∏è –ö–≤–µ—Å—Ç—ã –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 00:00",
        parse_mode=ParseMode.HTML,
        reply_markup=inline_builder(
            ["üéÅ –ü–æ–ª—É—á–∏—Ç—å", "üîô –ú–µ–Ω—é"],
            ["get_quest_reward", "tokio"],
            row_width=[1, 1]
        )
    )

    media_id = InputMediaPhoto(media='AgACAgIAAx0CfstymgACHvFm7nfVl1UgyCpMV2em6oT-0fVueAAC0d8xG6zFeUuTGRHASLHNiwEAAwIAA3gAAzYE')

    inline_id = callback.inline_message_id
    await callback.message.edit_media(media_id, inline_id)
    await callback.message.edit_caption(inline_id, **pattern)

    # await callback.answer(f"‚ùñ  üìú –ó–∞–¥–∞–Ω–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)


@router.callback_query(F.data == "get_quest_reward")
async def get_quest_reward(callback: CallbackQuery):
    user_id = callback.from_user.id
    current_date = datetime.today().date()
    current_datetime = datetime.combine(current_date, datetime.time(datetime.now()))
    account = await mongodb.get_user(user_id)
    last_get_reward = account["tasks"]["last_get_reward"]
    last_get_reward = last_get_reward.date()
    if last_get_reward == current_date:
        await callback.answer(f"‚ùñ ‚úÖ –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –ø–æ–ª—É—á–µ–Ω–∞, üéÅ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∑–∞–≤—Ç—Ä–∞!", show_alert=True)
        return
    else:
        if "halloween" not in account['inventory']['items']:
            await mongodb.update_user(user_id, {"inventory.items.halloween": 0})
        if (account["tasks"]["last_summon"].date() == current_date and account["tasks"]["last_arena_fight"].date() == current_date
                and account["tasks"]["last_dungeon"].date() == current_date and account["tasks"]["last_free_summon"].date() == current_date
                and account["tasks"]["last_shop_purchase"].date() == current_date):
            if account['account']['prime']:
                await mongodb.update_user(user_id, {"account.money": account["account"]["money"] + 2500})
                await mongodb.update_user(user_id, {
                    "inventory.items.tickets.golden": account["inventory"]["items"]["tickets"]["golden"] + 5})
                await mongodb.update_user(user_id, {
                    "inventory.items.halloween": account["inventory"]["items"]["halloween"] + 100})
                await mongodb.update_user(user_id, {"tasks.last_get_reward": current_datetime})
                await callback.answer(f"‚ùñ ‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞", show_alert=True)
                return
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                current_date = datetime.today().date()
                current_datetime = datetime.combine(current_date, datetime.time(datetime.now()))

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–∞—Å—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±—ä–µ–∫—Ç –¥–∞—Ç—ã)
                if 'pass_expiration' in account:
                    pass_expires = account['pass_expiration']
                else:
                    expiration_date = current_datetime + timedelta(days=30)
                    await mongodb.update_user(user_id, {"pass_expiration": expiration_date})
                    pass_expires = expiration_date

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å—Ç–µ–∫ –ª–∏ –ø–∞—Å—Å
                if current_datetime > pass_expires:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å prime –Ω–∞ False
                    await mongodb.update_value(user_id, {'account.prime': False})
            else:
                await mongodb.update_user(user_id, {"account.money": account["account"]["money"] + 1400})
                await mongodb.update_user(user_id, {"inventory.items.tickets.golden": account["inventory"]["items"]["tickets"]["golden"] + 3})
                await mongodb.update_user(user_id, {"inventory.items.halloween": account["inventory"]["items"]["halloween"] + 65})
                await mongodb.update_user(user_id, {"tasks.last_get_reward": current_datetime})
                await callback.answer(f"‚ùñ ‚úÖ –ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞", show_alert=True)
                return
        else:
            await callback.answer(f"‚ùñ ‚úñÔ∏è –ù–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã", show_alert=True)
            return
