import re

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InputMediaAnimation
from data import mongodb
from filters.chat_type import ChatTypeFilter
from keyboards.builders import inline_builder, profile, rm, get_common, menu_card_button, menu_button
from routers import main_menu
from routers.gacha import first_summon
from utils.states import Form
from routers import settings

router = Router()

EMOJI_PATTERN = re.compile("[\U0001F600-\U0001F64F\U0001F300-\U0001F5FF\U0001F680-\U0001F6FF\U0001F700-\U0001F77F\U0001F780-\U0001F7FF\U0001F800-\U0001F8FF\U0001F900-\U0001F9FF\U0001FA00-\U0001FA6F\U0001FA70-\U0001FAFF]+")


@router.message(ChatTypeFilter(chat_type=["private"]), Command("start"))
async def fill_profile(message: Message,  state: FSMContext):
    user_id = message.from_user.id

    # –†–∞–∑–¥–µ–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
    parts = message.text.split()
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã, –æ–Ω–∏ –±—É–¥—É—Ç –≤–æ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
    referral_id = int(parts[1]) if len(parts) > 1 and parts[1].isdigit() else None

    account = await mongodb.get_user(user_id)
    if account is not None and account['_id'] == user_id:
        await main_menu.main_menu(message)
    else:
        await state.set_state(Form.name)
        await message.answer_animation(
            animation="CgACAgIAAx0CfstymgACHXpm3-JUbweB3b06B_W3bAgiVWRycQACI1wAAvfAAAFLc8MF1Rvq7R02BA",
            caption='‚ùñ üíÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'
                    f'\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ'
                    f'\nüé¥–ó–¥–µ—Å—å –≤—ã –±—É–¥–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å —Å–≤–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ üó° —Å—Ä–∞–∂–∞—Ç—å—Å—è'
                    f'\n<blockquote expandable>üî• –°–æ—Ä–µ–≤–Ω—É–π—Ç–µ—Å—å, —É –∫–æ–≥–æ –∫—Ä—É—á–µ –∫–∞—Ä—Ç—ã'
                    f'\nüÉè –°–æ–±–∏—Ä–∞–π—Ç–µ –∫–æ–ª–æ–¥—É'
                    f'\n‚öîÔ∏è –°—Ä–∞–∂–∞–π—Ç–µ—Å—å –Ω–∞ –∞—Ä–µ–Ω–µ'
                    f'\nüèÜ –í—ã–∏–≥—Ä–∞–π—Ç–µ –ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∏–∑—ã'
                    f'\nüÉè –û–±–º–µ–Ω–∏–≤–∞–µ—Ç–µ—Å—å –∫–∞—Ä—Ç–∞–º–∏'
                    f'\nüé´ –ü–æ–∫—É–ø–∞–π—Ç–µ –±–∏–ª–µ—Ç–æ–≤'
                    f'\nüí† –°–æ–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –≤ –ø–æ–¥–∑–µ–º–µ–ª—å–µ'
                    f'\nüëæ –£–±–µ–π—Ç–µ –±–æ—Å—Å–æ–≤'
                    f'\nüîÆ –ü–æ–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É –≤ ¬´–ì–∞—á–µ¬ª</blockquote>'
                    f'\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ'
                    '\n‚ùñ üìú –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
        await message.answer("‚ùñ ü™™  –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º: ", reply_markup=profile(message.from_user.first_name))
        if referral_id and referral_id != user_id:
            await state.update_data(referral=referral_id)
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å referral_id, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª


@router.message(Form.name)
async def form_name(message: Message, state: FSMContext):
    if not EMOJI_PATTERN.search(message.text):
        if len(message.text) <= 10:

            await state.update_data(name=f"<a href='https://t.me/{message.from_user.username}'><b>{message.text}</b></a>")
            await state.set_state(Form.universe)
            media_id = "AgACAgIAAx0CfstymgACCxNl4ie8goZjHQ1rAV5rxcz2a9XLnQACBs8xG7-XGUsGHmby9061bgEAAwIAA3kAAzQE"
            await message.answer(f"\n\n ‚ùñ ‚öôÔ∏è –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –¥–∏–Ω–∞–º–∏—á–Ω–æ, –≤–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ "
                                 f"–∏ –≤–∏–¥–µ–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –∏ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —á–∞—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º",
                                 reply_markup=rm())
            pattern = dict(
                caption="‚ùñ üó∫ –í—ã–±–∏—Ä–∞–π—Ç–µ –≤—Å–µ–ª–µ–Ω–Ω—É—é"
                        "\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                        "\n‚ùñ üó∫ –í—Å–µ–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∏ –¥–æ–ø–æ–ª–Ω—è—Ç—å—Å—è"
                        f"\n<blockquote><b>üí° –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ</b>"
                        f"\n ‚Ä¢ üèüÔ∏è <b>–ê—Ä–µ–Ω–∞</b> - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –¥—Ä—É–≥–∏—Ö –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö, –∫—Ä–æ–º–µ ‚≠êÔ∏è Allstars, "
                        f"–≥–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å –Ω–∞–≤—ã–∫–∏ üé¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏–∑ –∞–Ω–∏–º–µ"
                        f"\n ‚Ä¢ üÉè <b>–ë–∏—Ç–≤–∞</b> - —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç üèüÔ∏è –∞—Ä–µ–Ω—ã –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Å–µ–ª–µ–Ω–Ω–æ–π ‚≠êÔ∏è Allstars, "
                        f"–∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ –∫–∞—Ä—Ç–æ—á–Ω—ã–π –±–∏—Ç–≤—ã —Å üÉè –∫–æ–ª–æ–¥–æ–π –∫–∞—Ä—Ç.</blockquote>"
                        "\n‚ùñ üîÑ –í—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤—Å–µ–ª–µ–Ω–Ω—É—é –≤ ‚öôÔ∏è Ô∏è–Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                reply_markup=inline_builder(['‚≠êÔ∏è Allstars', 'üó° Bleach', 'üç• Naruto', 'üî• Jujutsu Kaisen'],
                                            ['Allstars', 'Bleach', 'Naruto', 'Jujutsu_Kaisen'], row_width=1),
            )
            await message.answer_photo(media_id, **pattern)
        else:
            await message.answer("‚úñÔ∏è –ù–∏–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: ")
    else:
        await message.answer("‚úñÔ∏è –ù–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —ç–º–æ–¥–∑–∏. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é —Å –ø–æ–º–æ—â—å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: ")


@router.callback_query(F.data.in_(['Allstars']))
async def get_first_free(callback: CallbackQuery, state: FSMContext):
    account = await mongodb.get_user(callback.from_user.id)
    if account is not None and account['_id'] == callback.from_user.id:
        character = account.get('character', {}).get('Allstars')
        if character:
            await mongodb.update_user(callback.from_user.id, {'universe': 'Allstars'})
            await callback.answer("‚ùñ üó∫ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é", show_alert=True)
            await callback.message.answer("‚ùñ üó∫ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é", reply_markup=menu_card_button())
            await settings.settings(callback)
            return
    await state.update_data(universe=callback.data)
    media = InputMediaAnimation(media="CgACAgIAAx0CfstymgACEnpmnUiYllQQPMNY7B3y44Okelr6UgACsVEAApQD6UhAS-MzjVWVxTUE")
    await callback.message.edit_media(media=media)
    await callback.message.edit_caption(caption="‚ùñ ‚≠êÔ∏è Allstars"
                                        "\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                                        "\n<blockquote expandable>üó∫ –í —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ üé¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ "
                                                "–∏–∑ —Ä–∞–∑–Ω—ã—Ö –∞–Ω–∏–º–µ. –í—ã –º–æ–µ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å "
                                                "üÉè –∫–æ–ª–æ–¥—É –∏ —Å—Ä–∞–∂–∞—Ç—å—Å—è –≤ üÉè <b>–ë–∏—Ç–≤–µ</b></blockquote>", reply_markup=get_common())


@router.callback_query(F.data.in_(['Bleach']))
async def get_first_free(callback: CallbackQuery, state: FSMContext):
    account = await mongodb.get_user(callback.from_user.id)
    if account is not None and account['_id'] == callback.from_user.id:
        character = account.get('character', {}).get('Bleach')
        if character:
            await mongodb.update_user(callback.from_user.id, {'universe': 'Bleach'})
            await callback.answer("‚ùñ üó∫ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é", show_alert=True)
            await callback.message.answer("‚ùñ üó∫ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é", reply_markup=menu_button())
            await settings.settings(callback)
            return
    await state.update_data(universe=callback.data)
    media = InputMediaAnimation(media="CgACAgIAAx0CfstymgACCxZl5FxQpuMBOz7tFM8BU88VOEvMXgACtjwAAkLSIEtSvf16OnsuwTQE")
    await callback.message.edit_media(media=media)
    await callback.message.edit_caption(caption="‚ùñ üó° Bleach"
                                        "\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                                        "\n<blockquote expandable>üó∫ –í —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ üé¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ "
                                                "–∏–∑ –∞–Ω–∏–º–µ üó° –ë–ª–∏—á. –í—ã –º–æ–µ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å "
                                                "üé¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Å—Ä–∞–∂–∞—Ç—å—Å—è –≤ üèüÔ∏è <b>–ê—Ä–µ–Ω–µ</b></blockquote>",
                                        reply_markup=get_common())


@router.callback_query(F.data.in_(['Naruto']))
async def get_first_free(callback: CallbackQuery, state: FSMContext):
    account = await mongodb.get_user(callback.from_user.id)
    if account is not None and account['_id'] == callback.from_user.id:
        character = account.get('character', {}).get('Naruto')
        if character:
            await mongodb.update_user(callback.from_user.id, {'universe': 'Naruto'})
            await callback.answer("‚ùñ üó∫ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é", show_alert=True)
            await callback.message.answer("‚ùñ üó∫ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é", reply_markup=menu_button())
            await settings.settings(callback)
            return
    await state.update_data(universe=callback.data)
    media = InputMediaAnimation(media="CgACAgIAAxkBAAKu-2bfz0QjhL_TZCnL-Zha1vsprdVLAAKCUQACzJcBS3N7PqOXSE2qNgQ")
    await callback.message.edit_media(media=media)
    await callback.message.edit_caption(caption="‚ùñ üç• Naruto"
                                        "\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                                        "\n<blockquote expandable>üó∫ –í —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ üé¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ "
                                                "–∏–∑ –∞–Ω–∏–º–µ üç• –ù–∞—Ä—É—Ç–æ. –í—ã –º–æ–µ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å "
                                                "üé¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Å—Ä–∞–∂–∞—Ç—å—Å—è –≤ üèüÔ∏è <b>–ê—Ä–µ–Ω–µ</b></blockquote>",
                                        reply_markup=get_common())


@router.callback_query(F.data.in_(['Jujutsu_Kaisen']))
async def get_first_free(callback: CallbackQuery, state: FSMContext):
    account = await mongodb.get_user(callback.from_user.id)
    if account is not None and account['_id'] == callback.from_user.id:
        character = account.get('character', {}).get('Jujutsu_Kaisen')
        if character:
            await mongodb.update_user(callback.from_user.id, {'universe': 'Jujutsu_Kaisen'})
            await callback.answer("‚ùñ üó∫ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é", show_alert=True)
            await callback.message.answer("‚ùñ üó∫ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é", reply_markup=menu_button())
            await settings.settings(callback)
            return
    await state.update_data(universe=callback.data)
    media = InputMediaAnimation(media="CgACAgIAAx0CfstymgACQChoOuptItjKNzPwfRbEeo3pNgM08QACqnMAAmIAAdlJUKBfx75OSdU2BA")
    await callback.message.edit_media(media=media)
    await callback.message.edit_caption(caption="‚ùñ üî• Jujutsu Kaisen"
                                        "\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                                        "\n<blockquote expandable>üó∫ –í —ç—Ç–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ üé¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ "
                                                "–∏–∑ –∞–Ω–∏–º–µ üî• –ú–∞–≥–∏—á–µ—Å–∫–æ–π –±–∏—Ç–≤—ã. –í—ã –º–æ–µ–∂–µ—Ç–µ —Å–æ–±—Ä–∞—Ç—å "
                                                "üé¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Å—Ä–∞–∂–∞—Ç—å—Å—è –≤ üèüÔ∏è <b>–ê—Ä–µ–Ω–µ</b></blockquote>",
                                        reply_markup=get_common())


# @router.callback_query(F.data.in_(['Allstars(old)']))
# async def get_first_free(callback: CallbackQuery, state: FSMContext):
#     account = await mongodb.get_user(callback.from_user.id)
#     if account is not None and account['_id'] == callback.from_user.id:
#         character = account.get('character', {}).get('Allstars(old)')
#         if character:
#             await mongodb.update_user(callback.from_user.id, {'universe': 'Allstars(old)'})
#             await callback.answer("‚ùñ üó∫ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –≤—Å–µ–ª–µ–Ω–Ω—É—é", show_alert=True)
#             return
#     await state.update_data(universe=callback.data)
#     media = InputMediaAnimation(media="CgACAgIAAx0CfstymgACEnpmnUiYllQQPMNY7B3y44Okelr6UgACsVEAApQD6UhAS-MzjVWVxTUE")
#     await callback.message.edit_media(media=media)
#     await callback.message.edit_caption(caption="‚ùñ üó∫ Allstars(old)"
#                                         "\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
#                                         "\n<blockquote expandable>üíÆ –≠—Ç–∞ —Å–∞–º–∞—è –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è. –í –≠—Ç–æ–π –í—Å–µ–ª–µ–Ω–Ω–æ–π "
#                                                 "–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∞–Ω–∏–º–µ –Ω–æ –ø–æ–∫–∞ –∞—Ä–µ–Ω–∞ "
#                                                 "–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –í—ã –º–æ–µ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–±—Ä–∞—Ç—å "
#                                                 "–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π</blockquote>", reply_markup=get_common())


@router.callback_query(F.data == "get_first_free")
async def get_first_free(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user_id = callback.from_user.id
    universe = data.get('universe')
    character, character_category, power = await first_summon(callback, universe)
    account = await mongodb.get_user(callback.from_user.id)
    if account is not None and account['_id'] == callback.from_user.id:
        await mongodb.update_user(callback.from_user.id, {'universe': universe, f'character.{universe}': character})
    else:
        await mongodb.input_user(user_id, data.get('name'), universe, character, power)

        referral_id = data.get('referral')
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å referral_id, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª
        referral = await mongodb.get_user(referral_id)
        if referral:
            # –ï—Å–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
            if user_id not in referral['account']['referrals']:
                # –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
                await mongodb.push_referral(referral_id, user_id)
                # –ü–æ–ª—É—á–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
                updated_referral = await mongodb.get_user(referral_id)
                # –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –¥–æ—Å—Ç–∏–≥–ª–æ –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö 3
                if len(updated_referral['account']['referrals']) % 3 == 0:
                    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–æ, —É–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –Ω–∞ 1
                    await mongodb.update_value(referral_id, {'inventory.items.tickets.keys': 1})
    await mongodb.push(universe, character_category, character, user_id)
    await state.clear()
