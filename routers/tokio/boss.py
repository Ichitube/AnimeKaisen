from datetime import datetime, timedelta
from aiogram import Router, F, Bot
from contextlib import suppress
import asyncio

from aiogram.types import CallbackQuery, InputMediaAnimation, InputMediaPhoto, Message
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext

from data import mongodb, card_characters
from data import character_photo
from filters.chat_type import ChatTypeFilter
from data.character_photo import get_stats
from keyboards.builders import inline_builder, Pagination, pagination_boss

router = Router()

battle_data = []
user_data = []

BOSSES = [
    {"name": "üêâ –®–∞–¥—Ä–∞–≥–æ–Ω", "hp": 100000, "damage": 1000, 'class': 'strength', 'defense': 20, "strength": 100,
     "agility": 75, "intelligence": 75, "ability": "üî• –û–≥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ",
     "avatar": "CgACAgIAAx0CfstymgACPolna-3ni4cLL39VwuvlFiUQ8kQVVgACMmMAArowYUshoYqGQ-S3bjYE"},
    {"name": "üêâ –û–º—Ä–∞–∫—Å", "hp": 100000, "damage": 1000, 'class': 'agility', 'defense': 20, "strength": 75,
     "agility": 100, "intelligence": 75, "ability": "üå™ –¢–æ—Ä–Ω–∞–¥–æ",
     "avatar": "CgACAgIAAx0CfstymgACPn9na-1_e8cHSYA29Plm6gXFgBkzjQACK2MAArowYUsztOi5fvuTOTYE"},
    {"name": "üêâ –§–∏—Ä–≥–∞—Ä—Ç", "hp": 100000, "damage": 1000, 'class': 'agility', 'defense': 20, "strength": 100,
     "agility": 75, "intelligence": 75, "ability": "‚óæÔ∏è –¢—ë–º–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è",
     "avatar": "CgACAgIAAx0CfstymgACPoFna-2Pk-zLkdcvwZwTGyhajxslTQACLGMAArowYUvGtG_zdydYBjYE"},
    {"name": "üêâ –ò–≥–Ω–∏—Å—Å–µ—Ä", "hp": 100000, "damage": 1000, 'class': 'intelligence', 'defense': 20, "strength": 100,
     "agility": 75, "intelligence": 75, "ability": "‚ùÑÔ∏è –õ–µ–¥—è–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ",
     "avatar": "CgACAgIAAx0CfstymgACPndna-1PLFQrktyzqXUn-HhjY_NWagACI2MAArowYUu5DkXp68OLyjYE"},
    {"name": "üêâ –ë–ª–µ–π–∑—Ä–æ–Ω", "hp": 100000, "damage": 1000, 'class': 'agility', 'defense': 20, "strength": 100,
     "agility": 75, "intelligence": 75, "ability": "‚óæÔ∏è –¢—ë–º–Ω—ã–π –æ–≥–æ–Ω—å",
     "avatar": "CgACAgIAAx0CfstymgACPn1na-1wj7ZjkXLLICHpUX4O9njL6QACJ2MAArowYUsKQNL5XBCDUTYE"},
    {"name": "üêâ –≠–ª–¥–æ—Ä–∞", "hp": 100000, "damage": 1000, 'class': 'strength', 'defense': 20, "strength": 100,
     "agility": 75, "intelligence": 75, "ability": "üî• –ì–æ—Ä—è—á–∞—è –ª–∞–≤–∞",
     "avatar": "CgACAgIAAx0CfstymgACPoVna-2403qkX-omvqibT9DG4V5ACAACMGMAArowYUv3_Hw6LwtDXDYE"},
    {"name": "üêâ –≠–º–±–µ—Ä—É—Å", "hp": 100000, "damage": 1000, 'class': 'strength', 'defense': 20, "strength": 100,
     "agility": 75, "intelligence": 75, "ability": "‚ö°Ô∏è –ß—ë—Ä–Ω–∞—è –º–æ–ª–Ω–∏—è",
     "avatar": "CgACAgIAAx0CfstymgACPoNna-2y5pckqJnzoK_D2h0cUUOJ1AACL2MAArowYUuiG_oGnCGt6zYE"},
    {"name": "üêâ –°–∫–∞–π–¥—Ä–∏—Å", "hp": 100000, "damage": 1000, 'class': 'intelligence', 'defense': 20, "strength": 100,
     "agility": 75, "intelligence": 75, "ability": "‚òÅÔ∏è –¢—ë–º–Ω–∞—è –±—É—Ä—è",
     "avatar": "CgACAgIAAx0CfstymgACPnVna-1Dhde65Wyr4GgklR1koBsNlgACIWMAArowYUtlr8P-LuT-dTYE"},
    {"name": "üë∫ –§—ç–π—Ä–≤–∏–Ω", "hp": 100000, "damage": 1000, 'class': 'strength', 'defense': 20, "strength": 100,
     "agility": 75, "intelligence": 75, "ability": "‚òÑÔ∏è –û–≥–Ω–µ–Ω–Ω—ã–π —à–∞—Ä",
     "avatar": "CgACAgIAAx0CfstymgACPntna-1p3n5rFymAE88EEy20FWeipAACJmMAArowYUv9rKj5HJGmRDYE"},
]


@router.message(ChatTypeFilter(chat_type=["private"]), F.text == "üëæ –ë–æ—Å—Å")
@router.callback_query(F.data == "boss")
async def boss_func(callback: CallbackQuery | Message, account: dict = None, user_id: int = None):
    if user_id is None:
        user_id = callback.from_user.id
    if account is None:
        account = await mongodb.get_user(user_id)

    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_datetime = datetime.now()
    if 'boss' not in account:
        # –ï—Å–ª–∏ –±–æ—Å—Å–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
        account['boss'] = {
            "boss_id": 0,
            "name": BOSSES[0]["name"],
            "current_hp": BOSSES[0]["hp"],
            "hp": BOSSES[0]["hp"],
            "avatar": BOSSES[0]["avatar"],
            "damage": BOSSES[0]["damage"],
            "class": BOSSES[0]["class"],
            "defense": BOSSES[0]["defense"],
            "strength": BOSSES[0]["strength"],
            "agility": BOSSES[0]["agility"],
            "intelligence": BOSSES[0]["intelligence"],
            "ability": BOSSES[0]["ability"],
            "is_alive": True,
            "last_spawn": current_datetime.isoformat(),
            "damage_dealt": 0
        }
        await mongodb.update_user(user_id, {"boss": account['boss']})
    account = await mongodb.get_user(user_id)
    last_spawn_raw = account['boss'].get('last_spawn')

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º last_spawn –≤ datetime
    if isinstance(last_spawn_raw, str):
        last_spawn = datetime.fromisoformat(last_spawn_raw)
    else:
        last_spawn = last_spawn_raw or current_datetime

    # –í—ã—á–∏—Å–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏
    elapsed = current_datetime - last_spawn

    # if elapsed >= timedelta(seconds=200):
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 72 —á–∞—Å–æ–≤ (3 –¥–Ω—è)
    if elapsed >= timedelta(hours=72):
        current_boss_id = account['boss'].get("boss_id", 0)
        next_boss_id = (current_boss_id + 1) % len(BOSSES)  # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫—Ä—É–≥—É
        next_boss = BOSSES[next_boss_id]

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
        account['boss'] = {
            "boss_id": next_boss_id,
            "name": next_boss["name"],
            "current_hp": next_boss["hp"],
            "hp": next_boss["hp"],
            "avatar": next_boss["avatar"],
            "class": next_boss["class"],
            "damage": next_boss["damage"],
            "defense": next_boss["defense"],
            "is_alive": True,
            "strength": next_boss["strength"],
            "agility": next_boss["agility"],
            "intelligence": next_boss["intelligence"],
            "ability": next_boss["ability"],
            "last_spawn": current_datetime.isoformat(),
            "damage_dealt": 0
        }

        # ‚ùó –Ω–µ –∑–∞–±—É–¥—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –±–∞–∑—É, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å MongoDB:
        await mongodb.update_user(user_id, {"boss": account['boss']})
        account = await mongodb.get_user(user_id)  # –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –∑–¥–µ—Å—å
        last_spawn_raw = account['boss'].get('last_spawn')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º last_spawn –≤ datetime
        if isinstance(last_spawn_raw, str):
            last_spawn = datetime.fromisoformat(last_spawn_raw)
        else:
            last_spawn = last_spawn_raw or current_datetime


    # –í—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ—Å–ø–∞–≤–Ω–∞ (72 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Å–ø–∞–≤–Ω–∞)
    next_respawn = last_spawn + timedelta(hours=72)

    # –°–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å
    remaining = next_respawn - current_datetime

    total_minutes = int(remaining.total_seconds() // 60)
    days = total_minutes // (60 * 24)
    hours = (total_minutes // 60) % 24
    minutes = total_minutes % 60

    time = f"{days}–¥ {hours}—á {minutes}–º–∏–Ω"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–æ–≤–æ–º –±–æ—Å—Å–µ

    if account['boss']['class'] == 'strength':
        clas = "üí™ –°–∏–ª–∞"
    elif account['boss']['class'] == 'agility':
        clas = "ü¶∂ –õ–æ–≤–∫–æ—Å—Ç—å"
    else:
        clas = "üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç"

    if "boss_squad" not in account:
        await mongodb.update_user(user_id, {"boss_squad": {
            "bg1": "empty",
            "bg1_universe": "empty",
            "bg2": "empty",
            "bg2_universe": "empty",
            "bg3": "empty",
            "bg3_universe": "empty",
            "bg4": "empty",
            "bg4_universe": "empty",
            "bg5": "empty",
            "bg5_universe": "empty",
            "bg6": "empty",
            "bg6_universe": "empty"
        }})
        account = await mongodb.get_user(user_id)

    boss_data = account["boss"]
    bos = Boss(
        name=boss_data["name"],
        hp=boss_data["current_hp"],
        strength=boss_data["strength"],
        agility=boss_data["agility"],
        intelligence=boss_data["intelligence"],
        ability=boss_data["ability"],
        clas=boss_data["class"]
    )

    if 'boss_keys' not in account['account']:
        await mongodb.update_user(user_id, {"account.boss_keys": 0})
        account = await mongodb.get_user(user_id)

    if 'clan_coins' not in account['account']:
        await mongodb.update_user(user_id, {"account.clan_coins": 0})
        account = await mongodb.get_user(user_id)
    keys = account['account']['boss_keys']

    if not account['boss']['is_alive']:
        media_id = "CgACAgIAAx0CfstymgACQApoLhMZydd6r6wQCGjwaMzc-QyEmgAC6noAAsTQcUkwGF1ofkEWljYE"
        buttons = ["üè¥ –û—Ç—Ä—è–¥", "üîô –ù–∞–∑–∞–¥"]
        callbacks = ["boss_squad", "tokio"]
        text = (f"üíî –ë–æ—Å—Å –ø–æ–≤–µ—Ä–∂–µ–Ω!"
                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                f"\nüí∞ –í—ã–±—ã–≤—à–∏–µ —Ä–µ—Å—É—Ä—Å—ã:"
                f"\n<blockquote> ‚Ä¢ 50 ü™ô –∫–ª–∞–Ω–æ–≤—ã—Ö –º–æ–Ω–µ—Ç"
                f"\n ‚Ä¢ 100 üí† –Ω–µ—Ñ—Ä–∏—Ç–æ–≤"
                f"\n ‚Ä¢ 250 üìÄ –∑–æ–ª–æ—Ç–∞ "
                f"\n ‚Ä¢ 500 üíø —Å–µ—Ä–µ–±—Ä–∞</blockquote>")
    else:
        media_id = account['boss']['avatar']
        buttons = ["üó° –ê—Ç–∞–∫–æ–≤–∞—Ç—å ‚Ä¢ üóù", "üè¥ –û—Ç—Ä—è–¥", "üîô –ù–∞–∑–∞–¥"]
        callbacks = ["battle_boss", "boss_squad", "tokio"]
        text = (f"‚ùñ <b>{account['boss']['name']}</b>"
                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                f"\n<b>–ö–ª–∞—Å—Å: {clas}</b>"
                f"\n<blockquote> ‚Ä¢ ‚ù§Ô∏è <b>{bos.health}</b> –∏–∑ {BOSSES[account['boss']['boss_id']]['hp']}"
                f"\n ‚Ä¢ ‚öîÔ∏è <b>{bos.attack}</b>"
                f"\n ‚Ä¢ üõ° <b>{bos.defense}</b>"
                f"\n ‚Ä¢ <b>{bos.ability}</b></blockquote>"
                f"\n–ö–ª—é—á–∏: {keys}üóù")

    pattern = dict(
        caption=f"{text}"
                f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                f"\n‚è±Ô∏è <b>Respawn:</b> {time}",
        reply_markup=inline_builder(buttons, callbacks, row_width=[1, 1, 1])
    )

    media = InputMediaAnimation(media=media_id)
    if isinstance(callback, CallbackQuery):
        await callback.message.edit_media(media)
        await callback.message.edit_caption(**pattern)
    else:
        await callback.answer_animation(animation=media_id, **pattern)


def deck_text(character, universe):
    strength = character_photo.get_stats(universe, character, 'arena')['strength']
    agility = character_photo.get_stats(universe, character, 'arena')['agility']
    intelligence = character_photo.get_stats(universe, character, 'arena')['intelligence']
    clas = character_photo.get_stats(universe, character, 'arena')['class']
    hp = strength * 75
    attack = strength * 5 + agility * 5 + intelligence * 5
    defense = (strength + agility + (intelligence // 2)) // 4

    text = (f" ‚Ä¢ üé¥ {character} "
            f"\n ‚îó‚û§ ‚Ä¢ ‚ô•Ô∏è{hp} ‚Ä¢ ‚öîÔ∏è{attack} ‚Ä¢ üõ°Ô∏è{defense}"
            f"\n     ‚îó‚û§ ‚Ä¢ ‚úä{strength} ‚Ä¢ üë£{agility} ‚Ä¢ üß†{intelligence} ‚úß {clas}")
    return text


@router.callback_query(F.data == "boss_squad")
async def boss_squad(callback: CallbackQuery):
    user_id = callback.from_user.id
    account = await mongodb.get_user(user_id)
    universe = account['universe']

    deck = account.get("boss_squad", {})

    required_fields = {
        "bg1": "empty",
        "bg1_universe": "empty",
        "bg2": "empty",
        "bg2_universe": "empty",
        "bg3": "empty",
        "bg3_universe": "empty",
        "bg4": "empty",
        "bg4_universe": "empty",
        "bg5": "empty",
        "bg5_universe": "empty",
        "bg6": "empty",
        "bg6_universe": "empty"
    }

    for field, value in required_fields.items():
        if field not in deck:
            deck[field] = value

    await mongodb.update_user(user_id, {"boss_squad": deck})
    account = await mongodb.get_user(user_id)

    deck_data = account["boss_squad"]
    first = deck_data["bg1"]
    first_universe = deck_data["bg1_universe"]
    second = deck_data["bg2"]
    second_universe = deck_data["bg2_universe"]
    third = deck_data["bg3"]
    third_universe = deck_data["bg3_universe"]
    fourth = deck_data["bg4"]
    fourth_universe = deck_data["bg4_universe"]
    fifth = deck_data["bg5"]
    fifth_universe = deck_data["bg5_universe"]
    sixth = deck_data["bg6"]
    sixth_universe = deck_data["bg6_universe"]

    cards = [first, second, third, fourth, fifth, sixth]
    card_universes = [first_universe, second_universe, third_universe, fourth_universe, fifth_universe, sixth_universe]
    messages = []
    icons = []
    powers = []

    for card in cards:
        if card == "empty":
            messages.append(" ‚Ä¢ üé¥ <i> –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ </i>")
            icons.append("‚ÑπÔ∏è")
            powers.append(0)
        else:
            p = get_stats(card_universes[cards.index(card)], card, 'arena')
            power = p.get('power')
            messages.append(deck_text(card, card_universes[cards.index(card)]))
            icons.append("‚úÖ")
            powers.append(power)

    # –î–æ—Å—Ç—É–ø –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
    f1_msg, f2_msg, f3_msg, f4_msg, f5_msg, f6_msg = messages
    f1_icon, f2_icon, f3_icon, f4_icon, f5_icon, f6_icon = icons
    first, second, third, fourth, fifth, sixth = powers

    power = first + second + third + fourth + fifth + sixth

    if "empty" in deck_data.values():
        msg = "‚ùÉ ‚ÑπÔ∏è –ï—Å—Ç—å –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞ –≤ –æ—Ç—Ä—è–¥–µ"
    else:
        msg = "‚ùÉ ‚úÖ –í–∞—à –æ—Ç—Ä—è–¥ –≥–æ—Ç–æ–≤ –∫ –±–∏—Ç–≤–µ"

    pattern = dict(
        caption=f"<b>‚ùñ üè¥ –û—Ç—Ä—è–¥ üó°</b>"
                f"\n‚úß‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚úß"
                f"\n<blockquote expandable>"
                f"{f1_msg}"
                f"\n\n{f2_msg}"
                f"\n\n{f3_msg}"
                f"\n\n{f4_msg}"
                f"\n\n{f5_msg}"
                f"\n\n{f6_msg}"
                f"</blockquote>"
                f"\n ‚öúÔ∏è –°–∏–ª–∞ –æ—Ç—Ä—è–¥–∞: {power}üó°"
                f"\n‚úß‚Ä¢‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚Ä¢‚úß"
                f"\n{msg}",
        reply_markup=inline_builder(
            [f"{f1_icon}", f"{f2_icon}", f"{f3_icon}",
             f"{f4_icon}", f"{f5_icon}", f"{f6_icon}",
             "üîô –ù–∞–∑–∞–¥"],
            ["bg1", "bg2", "bg3",
             "bg4", "bg5", "bg6",
             "boss"],
            row_width=[3, 3, 1]
        )
    )

    media_id = InputMediaPhoto(media='AgACAgIAAx0CfstymgACPb1nWiwJUdQC-37DUnytEI6vUZd25wACMvQxG_bt0Epw17D9NcuZQAEAAwIAA3kAAzYE')

    inline_id = callback.inline_message_id
    await callback.message.edit_media(media_id, inline_id)
    await callback.message.edit_caption(inline_id, **pattern)


async def get_inventory(user_id, rarity):
    account = await mongodb.get_user(user_id)
    universe = account['universe']
    invent = account['inventory']['characters'][universe]
    if rarity == "bg_divine":
        rarity = "divine"
    elif rarity == "bg_mythical":
        rarity = "mythical"
    elif rarity == "bg_legendary":
        rarity = "legendary"
    elif rarity == "bg_epic":
        rarity = "epic"
    elif rarity == "bg_rare":
        rarity = "rare"
    elif rarity == "bg_common":
        rarity = "common"
    elif rarity == "bg_halloween":
        rarity = "halloween"
    elif rarity == "bg_soccer":
        rarity = "soccer"
    return invent[rarity], universe


@router.callback_query(F.data.in_(['bg1', 'bg2', 'bg3', 'bg4', 'bg5', 'bg6']))
async def inventory(callback: CallbackQuery | Message, state: FSMContext):
    await state.update_data(deck=callback.data)
    if callback.data == "bg1":
        await state.update_data(card_universe="bg1_universe")
    elif callback.data == "bg2":
        await state.update_data(card_universe="bg2_universe")
    elif callback.data == "bg3":
        await state.update_data(card_universe="bg3_universe")
    elif callback.data == "bg4":
        await state.update_data(card_universe="bg4_universe")
    elif callback.data == "bg5":
        await state.update_data(card_universe="bg5_universe")
    elif callback.data == "bg6":
        await state.update_data(card_universe="bg6_universe")
    media_id = "CgACAgIAAxkBAAIVCmXMvbzs7hde-fvY9_4JCwU8W6HpAAKgOwACeyZoSuedvZenkxDNNAQ"
    user_id = callback.from_user.id
    account = await mongodb.get_user(user_id)
    universe = account['universe']
    total_divine = len(account['inventory']['characters'][universe].get('divine', {}))
    total_mythical = len(account['inventory']['characters'][universe].get('mythical', {}))
    total_legendary = len(account['inventory']['characters'][universe].get('legendary', {}))
    total_epic = len(account['inventory']['characters'][universe].get('epic', {}))
    total_rare = len(account['inventory']['characters'][universe].get('rare', {}))
    total_common = len(account['inventory']['characters'][universe].get('common', {}))
    total_elements = 0
    for sublist in account['inventory']['characters'][universe].values():
        for item in sublist:
            if isinstance(item, str):
                total_elements += 1
    msg = (f"\n‚ùñ üÉè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç: {total_elements}"
           f"\n\n‚ùñ üå† –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ üåü {total_divine}"
           f"\n‚ùñ üåå –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ ‚≠êÔ∏è {total_mythical}"
           f"\n‚ùñ üåÖ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ ‚≠êÔ∏è {total_legendary}"
           f"\n‚ùñ üéÜ –≠–ø–∏—á–µ—Å–∫–∏–µ ‚≠êÔ∏è {total_epic}"
           f"\n‚ùñ üéá –†–µ–¥–∫–∏–µ ‚≠êÔ∏è {total_rare}"
           f"\n‚ùñ üåÅ –û–±—ã—á–Ω—ã–µ ‚≠êÔ∏è {total_common}")
    buttons = [f"üå† –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ üåü {total_divine}", f"üåå –ú–∏—Ñ–∏—á–µ—Å–∫–∏–µ ‚≠êÔ∏è {total_mythical}", f"üåÖ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ ‚≠êÔ∏è {total_legendary}",
               f"üéÜ –≠–ø–∏—á–µ—Å–∫–∏–µ ‚≠êÔ∏è {total_epic}", f"üéá –†–µ–¥–∫–∏–µ ‚≠êÔ∏è {total_rare}", f"üåÅ –û–±—ã—á–Ω—ã–µ ‚≠êÔ∏è {total_common}", "üîô –ù–∞–∑–∞–¥"]
    callbacks = ["bg_divine", "bg_mythical", "bg_legendary", "bg_epic", "bg_rare", "bg_common", "boss_squad"]

    if universe == "Allstars":
        if "halloween" in account['inventory']['characters']['Allstars']:
            total_halloween = len(account['inventory']['characters']['Allstars'].get('halloween', {}))
            buttons.insert(0, f"üëª Halloween üéÉ {total_halloween}")
            callbacks.insert(0, "bg_halloween")
        # if "soccer" not in account['inventory']['characters']['Allstars']:
        #     account = await mongodb.get_user(user_id)
        #     await mongodb.update_user(user_id, {"inventory.characters.Allstars.soccer": []})
        #     total_soccer = len(account['inventory']['items'].get('soccer', {}))
        #     buttons.insert(0, f"‚öΩÔ∏è Soccer {total_soccer}")
        #     callbacks.insert(0, "soccer")

    pattern = dict(caption=f"ü•° –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"
                           f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                           f"\n<blockquote>‚ùñ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ üÉè –∫–∞—Ä—Ç—ã "
                           f"–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ üé¥ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∫ üè¥–æ—Ç—Ä—è–¥—É –Ω–∞ –±–∏—Ç–≤—É —Å –±–æ—Å—Å–æ–º."
                           f"\n‚ùñ –í—ã–±–µ—Ä–∏—Ç–µ ‚ú® —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç—ã, —á—Ç–æ–±—ã —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.</blockquote>"
                           f"\n‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                           f"\n‚ùñ üÉè –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç: {total_elements}",
                   reply_markup=inline_builder(
                       buttons,
                       callbacks, row_width=[1]))
    if isinstance(callback, CallbackQuery):
        inline_id = callback.inline_message_id
        media = InputMediaAnimation(media=media_id)
        await callback.message.edit_media(media, inline_id)
        await callback.message.edit_caption(inline_id, **pattern)
    else:
        await callback.answer_animation(animation=media_id, **pattern)


@router.callback_query(F.data.in_(['bg_soccer', 'bg_halloween', 'bg_common', 'bg_rare',
                                   'bg_epic', 'bg_legendary', 'bg_mythical', 'bg_divine']))
async def inventory(callback: CallbackQuery, state: FSMContext):
    await state.update_data(rarity=callback.data)
    inline_id = callback.inline_message_id
    user_id = callback.from_user.id
    invent, universe = await get_inventory(user_id, callback.data)
    if invent == []:
        await callback.answer("‚ùñ ‚úñÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç –¥–∞–Ω–Ω–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏", show_alert=True)
        return
    await state.update_data(character=invent[0])
    await state.update_data(universe=universe)
    avatar = character_photo.get_stats(universe, invent[0], 'avatar')
    avatar_type = character_photo.get_stats(universe, invent[0], 'type')
    if avatar_type == 'photo':
        photo = InputMediaPhoto(media=avatar)
    else:
        photo = InputMediaAnimation(media=avatar)
    rarity = character_photo.get_stats(universe, invent[0], 'rarity')
    msg = f"\n‚ùñ ‚ú® –†–µ–¥–∫–æ—Å—Ç—å: {rarity}"
    if universe not in ['Allstars', 'Allstars(old)']:
        strength = character_photo.get_stats(universe, invent[0], 'arena')['strength']
        agility = character_photo.get_stats(universe, invent[0], 'arena')['agility']
        intelligence = character_photo.get_stats(universe, invent[0], 'arena')['intelligence']
        power = character_photo.get_stats(universe, invent[0], 'arena')['power']
        msg = (f"\n‚ùñ ‚ú® –†–µ–¥–∫–æ—Å—Ç—å: {rarity}"
               f"\n‚ùñ üó∫ –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}"
               f"\n\n   ‚úäüèª –°–∏–ª–∞: {strength}"
               f"\n   üë£ –õ–æ–≤–∫–æ—Å—Ç—å: {agility}"
               f"\n   üß† –ò–Ω—Ç–µ–ª–µ–∫—Ç: {intelligence}"
               f"\n   ‚öúÔ∏è –ú–æ—â—å: {power}")
    await callback.message.edit_media(photo, inline_id)
    await callback.message.edit_caption(inline_id, caption=f"üé¥ {invent[0]}"
                                                           f"\n ‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                                                           f"{msg}"
                                                           f"\n‚îÄ‚îÄ‚ùÄ*Ã•Àö‚îÄ‚îÄ‚óå‚îÄ‚îÄ‚óå‚îÄ‚îÄ‚ùÄ*Ã•Àö‚îÄ‚îÄ‚îÄ‚îÄ"
                                                           f"\n‚ùñ üîñ 1 –∏–∑ {len(invent)}",
                                        reply_markup=pagination_boss())


@router.callback_query(Pagination.filter(F.action.in_(["bg_prev", "bg_next"])))
async def inventory(callback: CallbackQuery, callback_data: Pagination, state: FSMContext):
    try:
        inline_id = callback.inline_message_id
        page_num = int(callback_data.page)
        user_data = await state.get_data()
        invent, universe = await get_inventory(callback.from_user.id, user_data['rarity'])

        if callback_data.action == "bg_next":
            page_num = (page_num + 1) % len(invent)
        elif callback_data.action == "bg_prev":
            page_num = (page_num - 1) % len(invent)

        with suppress(TelegramBadRequest):
            await state.update_data(character=invent[page_num])
            avatar = character_photo.get_stats(universe, invent[page_num], 'avatar')
            avatar_type = character_photo.get_stats(universe, invent[page_num], 'type')
            if avatar_type == 'photo':
                photo = InputMediaPhoto(media=avatar)
            else:
                photo = InputMediaAnimation(media=avatar)
            rarity = character_photo.get_stats(universe, invent[page_num], 'rarity')
            msg = f"\n‚ùñ ‚ú® –†–µ–¥–∫–æ—Å—Ç—å: {rarity}"
            if universe not in ['Allstars', 'Allstars(old)']:
                strength = character_photo.get_stats(universe, invent[page_num], 'arena')['strength']
                agility = character_photo.get_stats(universe, invent[page_num], 'arena')['agility']
                intelligence = character_photo.get_stats(universe, invent[page_num], 'arena')['intelligence']
                power = character_photo.get_stats(universe, invent[page_num], 'arena')['power']
                msg = (f"\n‚ùñ ‚ú® –†–µ–¥–∫–æ—Å—Ç—å: {rarity}"
                       f"\n‚ùñ üó∫ –í—Å–µ–ª–µ–Ω–Ω–∞—è: {universe}"
                       f"\n\n   ‚úäüèª –°–∏–ª–∞: {strength}"
                       f"\n   üë£ –õ–æ–≤–∫–æ—Å—Ç—å: {agility}"
                       f"\n   üß† –ò–Ω—Ç–µ–ª–µ–∫—Ç: {intelligence}"
                       f"\n   ‚öúÔ∏è –ú–æ—â—å: {power}")

            await callback.message.edit_media(photo, inline_id)
            await callback.message.edit_caption(
                inline_id,
                caption=f"üé¥ {invent[page_num]}"
                        f"\n ‚îÄ‚îÄ ‚Ä¢‚úß‚úß‚Ä¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                        f"{msg}"
                        f"\n‚îÄ‚îÄ‚ùÄ*Ã•Àö‚îÄ‚îÄ‚óå‚îÄ‚îÄ‚óå‚îÄ‚îÄ‚ùÄ*Ã•Àö‚îÄ‚îÄ‚îÄ‚îÄ"
                        f"\n‚ùñ üîñ {page_num + 1} –∏–∑ {len(invent)}",
                reply_markup=pagination_boss(page=page_num)
            )
        await callback.answer()
    except KeyError:
        await callback.answer("‚ùñ üîÇ –ò–¥—ë—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞ —Å–≤—è–∑–∏ —Å —á–µ–º —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤—ã–∑–æ–≤–∏—Ç–µ "
                              "ü•° –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –µ—â–µ —Ä–∞–∑", show_alert=True)


@router.callback_query(F.data == "bg_choice_card")
async def change_ch(callback: CallbackQuery, state: FSMContext):
    try:
        user_id = callback.from_user.id
        account = await mongodb.get_user(user_id)
        deck = account["boss_squad"]
        data = await state.get_data()
        if data.get('character') in deck.values():
            await callback.answer("‚ùñ üîÇ –≠—Ç–æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂ —É–∂–µ –µ—Å—Ç—å –≤ –∫–æ–ª–æ–¥–µ", show_alert=True)
            return
        else:
            await mongodb.update_user(user_id, {f"boss_squad.{data.get('deck')}": data.get('character')})
            await mongodb.update_user(user_id, {f"boss_squad.{data.get('card_universe')}": data.get('universe')})
            await callback.answer("üé¥ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", show_alert=True)
            await boss_squad(callback)
    except KeyError:
        await callback.answer("‚ùñ üîÇ –ò–¥—ë—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–∞ —Å–≤—è–∑–∏ —Å —á–µ–º —Å–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –≤—ã–∑–æ–≤–∏—Ç–µ "
                              "ü•° –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –µ—â–µ —Ä–∞–∑", show_alert=True)


class Passive:
    def __init__(self, name, effect, undo_effect, duration, points=None, apply_once=False):
        self.name = name
        self.effect = effect
        self.undo_effect = undo_effect
        self.duration = duration
        self.points = points
        self.applied = False
        self.apply_once = apply_once


def calculate_damage(attacker, defender):
    base_damage = max(attacker.attack - defender.defense, 1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω 1

    # # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å–æ–≤–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ
    # class_advantage = {
    #     "strength": "agility",
    #     "agility": "intelligence",
    #     "intelligence": "strength"
    # }
    #
    # if class_advantage[attacker.clas] == defender.clas:
    #     base_damage = int(base_damage * 1.4)  # 1.4x —É—Ä–æ–Ω

    return base_damage


class Boss:
    def __init__(self, name, hp, strength, agility, intelligence, ability, clas):
        self.name = name
        self.strength = strength
        self.agility = agility
        self.intelligence = intelligence
        self.shield = 0
        self.health = hp
        self.attack = strength + agility + (intelligence // 2) * 35
        self.defense = (strength + agility + (intelligence // 2)) // 4 * 4
        self.mana = intelligence * 10
        self.crit_dmg = strength + (agility // 2) + (intelligence // 4)
        self.crit_ch = agility + (strength // 2) + (intelligence // 4)
        self.ability = ability
        self.clas = clas


async def battle(bot: Bot, user_id: int, rival_id: int, char1, char2, card1, card2):
    battle_log = []  # –õ–æ–≥ –±–∏—Ç–≤—ã

    def format_msg():
        return (f"\n‚úß ‚Ä¢ üÉú √ó    √ó    √ó    √ó    √ó    √ó    √ó    √ó üÉú ‚Ä¢ ‚úß"
                f"\n<blockquote>"  # expandable
                f"{'\n'.join(battle_log)}"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ö–æ–¥–æ–≤
                f"</blockquote>"
                f"\n‚úß ‚Ä¢ üÉú √ó    √ó    √ó    √ó    √ó    √ó    √ó    √ó üÉú ‚Ä¢ ‚úß")

    msg = await bot.send_message(user_id, format_msg())
    msg_rival = await bot.send_message(rival_id, format_msg())

    while char1.health > 0 and char2.health > 0:
        # –û–±–∞ –∞—Ç–∞–∫—É—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        damage1 = calculate_damage(char1, char2)
        damage2 = calculate_damage(char2, char1)

        char2.health -= damage1
        char1.health -= damage2

        if char1.health < 0:
            char1.health = 0
        if char2.health < 0:
            char2.health = 0

        battle_log.append(f"\n{char1.name} –Ω–∞–Ω–µ—Å {damage1}‚öî —É—Ä–æ–Ω–∞ \n{char2.name} –Ω–∞–Ω–µ—Å {damage2} —É—Ä–æ–Ω–∞")
        battle_log.append(f"\n{char1.name} {max(char1.health, 0)}‚ù§Ô∏è {char2.name} {max(char2.health, 0)}‚ù§Ô∏è")


async def auto_boss_battle(bot: Bot, user_id: int, characters: list, boss: Boss, account: dict, callback):
    alive_characters = characters[:]
    boss_is_alive = True
    turn_count = 0

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ
    callback = await callback.message.edit_caption(caption="‚è≥ –ë–∏—Ç–≤–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
    await asyncio.sleep(1.5)

    while boss.health > 0 and alive_characters:
        turn_count += 1

        # üí• –ê—Ç–∞–∫–∞ –æ—Ç—Ä—è–¥–∞ (–ø–æ–æ—á–µ—Ä—ë–¥–Ω–æ, —Å –ø–∞—É–∑–æ–π –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
        for char in alive_characters:
            damage = calculate_damage(char, boss)
            boss.health -= damage
            if boss.health < 0:
                boss.health = 0
            text = (
                f"Àπ{char.name}Àº –∞—Ç–∞–∫—É–µ—Ç {boss.name} –Ω–∞ {damage}üó° —É—Ä–æ–Ω–∞\n"
                f"\nHP –±–æ—Å—Å–∞: {boss.health}‚ù§Ô∏è "
            )
            await callback.edit_caption(caption=text)
            await asyncio.sleep(1.5)

        # üìç –ü–æ–±–µ–¥–∞
        if boss.health <= 0:
            await callback.edit_caption(caption=f"üèÜ {boss.name} –ø–æ–≤–µ—Ä–∂–µ–Ω!\n‚ù§Ô∏è HP: 0")
            break

        # üî• –ê—Ç–∞–∫–∞ –±–æ—Å—Å–∞ (–ø–æ –≤—Å–µ–º, –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π)
        boss_damage = boss.attack + 50 if turn_count % 3 == 0 else boss.attack
        ability_text = f"üí• –ë–æ—Å—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: {boss.ability}" if turn_count % 3 == 0 else ""

        await callback.edit_caption(caption=f"{ability_text}\n‚ò†Ô∏è {boss.name} –Ω–∞–Ω–æ—Å–∏—Ç {boss_damage} —É—Ä–æ–Ω–∞ –≤—Å–µ–º!")
        await asyncio.sleep(1.5)

        dead_chars = []
        for char in alive_characters:
            char.health -= boss_damage
            if char.health <= 0:
                dead_chars.append(char)

        for char in dead_chars:
            alive_characters.remove(char)
            await callback.edit_caption(caption=f"üíÄ {char.name} –ø–∞–ª –≤ –±–æ—é!")
            await asyncio.sleep(1.2)

    # üßæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    account['boss']['current_hp'] = boss.health
    account['boss']['is_alive'] = boss.health > 0
    await mongodb.update_user(user_id, {"boss": account['boss']})

    if boss.health > 0:
        await bot.send_message(user_id, "üè¥‚Äç‚ò†Ô∏è –ë–∏—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ‚ù§Ô∏è‚Äçü©π –ë–æ—Å—Å –≤—ã–∂–∏–ª.")
        await mongodb.update_user(user_id, {"boss.is_alive": True})
        await callback.delete()
        await boss_func(callback, account, user_id)
    else:
        # –¥–∞–µ–º –∞–Ω–≥—Ä–∞–¥—É
        account['account']['clan_coins'] += 50
        account['campaign']['nephritis'] += 100
        account['campaign']['gold'] += 250
        account['campaign']['silver'] += 500

        await mongodb.update_user(user_id, {
            "account.clan_coins": account['account']['clan_coins'],
            "campaign.nephritis": account['campaign']['nephritis'],
            "campaign.gold": account['campaign']['gold'],
            "campaign.silver": account['campaign']['silver'],
            "boss.is_alive": False,
            "boss.current_hp": 0
        })
        await callback.delete()
        await boss_func(callback, account, user_id)


@router.callback_query(F.data == "battle_boss")
async def battle_boss(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    account = await mongodb.get_user(user_id)

    if "empty" in account["boss_squad"].values():
        await callback.answer("‚ùñ üîÇ –£ –≤–∞—Å –µ—Å—Ç—å –ø—É—Å—Ç—ã–µ –º–µ—Å—Ç–∞ –≤ –æ—Ç—Ä—è–¥–µ", show_alert=True)
        return

    if account['account']['boss_keys'] <= 0:
        await callback.answer("‚ùñ üóù –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–ª—é—á–µ–π –¥–ª—è –±–∏—Ç–≤—ã —Å –±–æ—Å—Å–æ–º", show_alert=True)
        return

    account['account']['boss_keys'] -= 1
    await mongodb.update_user(user_id, {"account.boss_keys": account['account']['boss_keys']})

    await callback.message.delete_reply_markup()
    await callback.message.edit_caption(caption="‚öî –ë–∏—Ç–≤–∞ —Å –±–æ—Å—Å–æ–º –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...")
    squad = account["boss_squad"]
    characters = []
    slave = account["inventory"]["slaves"][0] if account["inventory"]["slaves"] else None

    for i in range(1, 7):
        name = squad[f"bg{i}"]
        universe = squad[f"bg{i}_universe"]
        cb = f"‚îã{name}‚îã"
        character = card_characters.CardCharacters(
            ident=account["_id"],
            p_name=account["name"],
            universe=universe,
            cb=cb,
            name=name,
            slave=slave,
            rid=0,
            data=f"bg{i}"
        )
        characters.append(character)

    boss_data = account["boss"]
    bos = Boss(
        name=boss_data["name"],
        hp=boss_data["current_hp"],
        strength=boss_data["strength"],
        agility=boss_data["agility"],
        intelligence=boss_data["intelligence"],
        ability=boss_data["ability"],
        clas=boss_data["class"]
    )

    await auto_boss_battle(bot=callback.bot, user_id=user_id, characters=characters, boss=bos, account=account, callback=callback)
